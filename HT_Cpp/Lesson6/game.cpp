#include <stdlib.h>
#include<windows.h>
#include "header_file.h"
#include "Generic_Graphic_lib.h"
#include<ctime>
graphics draw;
char personage[20][30]  ={
    ' ',' ',' ',' ',' ',' ',' ','#','#',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',
    ' ',' ',' ',' ',' ',' ','#',' ',' ','#',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',
    ' ',' ',' ',' ',' ',' ','#',' ',' ','#',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',
    ' ',' ',' ',' ',' ',' ',' ','#','#',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',
    ' ',' ',' ',' ',' ',' ','#','#','#','#',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',
    ' ',' ',' ',' ',' ','#','#','#',' ','#','#','#','#','-','-','*',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',
    ' ',' ',' ',' ',' ','#',' ','#',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',
    ' ',' ',' ',' ',' ',' ',' ','#',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',
    ' ',' ',' ',' ',' ',' ',' ','#',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',
    ' ',' ',' ',' ',' ',' ',' ','#',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',
    ' ',' ',' ',' ',' ',' ','#',' ','#',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',
    ' ',' ',' ',' ',' ',' ','#',' ','#',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',
    ' ',' ',' ',' ',' ',' ','#',' ','#',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',
    ' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',
    ' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',
    ' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',
    ' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',
    ' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',
    ' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',
    ' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '

};
char hello[20][30] = {
    ' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',
    ' ',' ','#',' ',' ',' ','#',' ',' ',' ',' ','#',' ',' ',' ',' ',' ','#','#',' ',' ',' ','#',' ',' ',' ',' ','#',' ',' ',
    ' ',' ','#',' ','#',' ','#',' ',' ','#',' ',' ',' ','#',' ',' ','#',' ',' ',' ',' ',' ',' ',' ',' ','#',' ',' ',' ',' ',
    ' ',' ','#',' ',' ',' ','#',' ',' ','#',' ',' ',' ','#',' ',' ','#',' ','#',' ',' ',' ','#',' ',' ','#',' ',' ',' ',' ',
    ' ',' ','#',' ',' ',' ','#',' ',' ','#',' ','#',' ','#',' ',' ','#',' ',' ','#',' ',' ','#',' ',' ','#',' ',' ',' ',' ',
    ' ',' ','#',' ',' ',' ','#',' ',' ','#',' ',' ',' ','#',' ',' ',' ','#','#',' ',' ',' ','#',' ',' ',' ',' ','#',' ',' ',
    ' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',
    ' ',' ','#',' ','#',' ',' ',' ',' ',' ','#',' ',' ',' ',' ','#','#','#',' ',' ','#','#','#',' ',' ','#',' ',' ',' ',' ',
    ' ',' ','#',' ',' ','#',' ',' ','#',' ',' ',' ','#',' ',' ',' ','#',' ',' ',' ',' ','#',' ',' ',' ','#',' ',' ',' ',' ',
    ' ',' ','#',' ','#',' ',' ',' ','#',' ',' ',' ','#',' ',' ',' ','#',' ',' ',' ',' ','#',' ',' ',' ','#',' ',' ',' ',' ',
    ' ',' ','#',' ',' ','#',' ',' ','#',' ','#',' ','#',' ',' ',' ','#',' ',' ',' ',' ','#',' ',' ',' ','#',' ',' ',' ',' ',
    ' ',' ','#',' ','#',' ',' ',' ','#',' ',' ',' ','#',' ',' ',' ','#',' ',' ',' ',' ','#',' ',' ',' ','#','#','#',' ',' ',
    ' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',
    ' ',' ','#','#','#','#','#','#','#',' ',' ',' ',' ',' ','*',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',
    ' ',' ','#',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','*','*','*',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',
    ' ',' ','#','#','#','#','#','#','#',' ',' ',' ',' ','/','*',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',
    ' ',' ','#',' ',' ',' ',' ',' ',' ',' ',' ',' ','/',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',
    ' ',' ','#','#','#','#','#','#','#',' ',' ','/',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',
    ' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '

};


class caster{
    public:
    caster(int hp_,int def_,int res_,int atk_,char class_type_,string name_){
        switch(tolower(class_type_)){
            case 'm':multiplyer = 0.9;break; //melee
            case 'r':multiplyer = 0.6;break; //ranged 
            case 's':multiplyer = 0.2;break; //summoner
        }
        hp = hp_;
        def = def_;
        atk = atk_;
        class_type = class_type_;
        name = name_;
    }
    bool is_critical_hit(){
        if((rand()%10/10.0)>=multiplyer){
            heal();
            return 1;
        }
        return 0;
    }
    float attack(){
        return atk + (is_critical_hit() ? multiplyer : 0);
    }
    void get_damage(float deal_damage,char debuff){
        if (deal_damage < def) deal_damage = def; 
        if (res == 0) res = 1;
        
        switch(debuff){
            case 'r':hp-=deal_damage-def;break;
            case 'd':hp-=deal_damage/res;break;
            case 'a':hp-=deal_damage;break;
            case 'n':hp-=(deal_damage-def)/res;break;
        }
        if(hp<0){
            hp = 0;
        }
    }
    void heal(){
        if(hp<1000){
            hp+=30;
        }
    }
    bool is_dead(){
        return hp>0 ? 0:1;    
    }
    string get_name(){
        return name;
    }
    string get_params(){
        return to_string(hp)+"hp";
    }
    private:
        float hp;
        int def;
        int res;
        int atk;
        char class_type;
        string name;
        float multiplyer;
};//int hp_,int def_,int res_,int atk_,char class_type_,string name_
caster player1(100,10,57,40,'m',"user");
caster player2(40,5,10,50,'r',"enemy");
void draw_basic(){
    draw.fill_canvas(' ');
    draw.draw_array(hello,5,5);
    draw.print();
    draw.fill_canvas(' ');
    Sleep(1000);
    draw.draw_array(personage,5,0);
    draw.draw_mirrored_array(personage,55,0);
    draw.draw_text(player1.get_name(),10,24);
    draw.draw_text(player2.get_name(),70,24);
    draw.print();
}
void draw_player_animation1(){
    for(int i = 0;i<=5;i++){
        draw.draw_array(personage,5,0);
        draw.draw_mirrored_array(personage,55,0);
        draw.draw_text("------>",i*10+10,5);
        draw.draw_text(player1.get_name()+" "+player1.get_params(),10,24);
        draw.draw_text(player2.get_name()+" "+player2.get_params(),70,24);
        Sleep(300);
        draw.print();
        draw.create_canvas();
    }
}
void draw_player_animation2(){
    for(int i = 6;i>=1;i--){
        draw.draw_array(personage,5,0);
        draw.draw_mirrored_array(personage,55,0);
        draw.draw_text("<--",i*10,5);
        draw.draw_text(player1.get_name()+" "+player1.get_params(),10,24);
        draw.draw_text(player2.get_name()+" "+player2.get_params(),70,24);
        Sleep(300);
        draw.print();
        draw.create_canvas();
    }
}
int main(){
    srand(time(NULL));

    draw_basic();
    while(player1.is_dead() == 0 && player2.is_dead() == 0){
        draw.change_color(basic);
        draw_player_animation1();
        player2.get_damage(player1.attack(),'n');
        draw.change_color(error);
        draw_player_animation2();
        player1.get_damage(player2.attack(),'n');
    }
    draw.draw_array(personage,5,0);
    draw.draw_mirrored_array(personage,55,0);
    
    draw.draw_text(player1.get_name()+" "+player1.get_params(),10,24);
    draw.draw_text(player2.get_name()+" "+player2.get_params(),70,24);
    
    draw.change_color(message);
    draw.print();
    draw.create_canvas();
    
    if(player1.is_dead() == 0){
        draw.draw_text(player1.get_name()+" WIN",10,24);
        
    }else{
        draw.draw_text(player2.get_name()+" WIN",10,24);
    }
    draw.print();
}